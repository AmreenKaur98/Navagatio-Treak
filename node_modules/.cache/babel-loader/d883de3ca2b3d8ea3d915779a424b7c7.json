{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\AMREEN\\\\project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\AMREEN\\\\project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\AMREEN\\\\project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\AMREEN\\\\project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\AMREEN\\\\project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\AMREEN\\\\project\\\\src\\\\components\\\\Home.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport quots from '../quots.jpg';\n/*\r\n  We will be using this link tag to user the post.id to use it as route parameter\r\n  and then based on the post we want to load our Post Component\r\n*/\n\nimport { Link } from 'react-router-dom'; // We are creating functional components because we are not storing any states over here.\n// className container and center are materialzied classes to give our app a look.\n\n/*\r\n  Now we want our Home content to fetch some data from the third party API.\r\n          Example: https://jsonplaceholder.typicode.com/posts\r\n  To do that we need to have axios --> axios is a HTTP client which helps to fetch data from API's.\r\n          --> We import the axios library from the npm : npm install axios\r\n          --> Now we have the axios installed so we can now go and fetch data from the API.\r\n          --> How do we do that:\r\n                # Since we have lifecycle hooks of a component, we discussed that a good point to load external data to the\r\n                  component is componentDidMount() --> when component is already mounted on the DOM.\r\n                # So we will use axios inside componentDidMount() to get the data from the API.\r\n                # To use lifecycle hooks we need to convert this component to a class based component:\r\n                          Why class based?\r\n                          Because we can't use lifecycle hooks inside functional component\r\n                        const Home = () => {\r\n                          return(\r\n                            {/*}<div>\r\n                              <div className='container center'>\r\n                                <h4>Home Page</h4>\r\n                                <p> This my home page. </p>\r\n                              </div>\r\n                            </div>\r\n                          )\r\n                        }\r\nexport default Home; */\n\nvar Home =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Home, _Component);\n\n  function Home() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Home)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      posts: []\n    };\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // We will first import axios and then make a get request because we want to get data.\n      // We can use post if want to post but for this application we just want to get data\n      // The get() request is asynchronous i.e it will take sometime to go and fetch the data from API.\n      // So it returns a promise.\n      // Promise means that this request will return at somepoint and time.\n      // So we use .then() method.\n      // Any code inside .then() method only triggers when the get request is completed.\n      axios.get('/') // .then() on completion fires back a callback function and that function has the response object.\n      // we can check the response object by logging it in the console.\n      // we have a property called data inside the response object.\n      // we can grab that res.data to get all the data and output it.\n      // To output this data in this Home content we need to have a state which will contains the posts.\n      .then(function (res) {\n        console.log(res);\n\n        _this2.setState({\n          posts: res.data.slice(0, 20) // this will set the posts state with the data we are fetching, by adding fetch we are limiting it 20 posts\n\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // Here we are destrucuting the posts and we are cycling through the list we have and then outputting it on out home page\n      var posts = this.state.posts;\n      var postList = posts.length ? posts.map(function (post) {\n        return React.createElement(\"div\", {\n          className: \"post card\",\n          key: post.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: quots,\n          alt: \"This is my car image\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"card-content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: '/' + post.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"card-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, post.title)), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, post.body)));\n      }) : React.createElement(\"div\", {\n        className: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"No posts yet\");\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container center home\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Home Page\"), postList));\n    }\n  }]);\n\n  return Home;\n}(Component);\n\nexport default Home;","map":{"version":3,"sources":["C:\\Users\\AMREEN\\project\\src\\components\\Home.js"],"names":["React","Component","axios","quots","Link","Home","state","posts","get","then","res","console","log","setState","data","slice","postList","length","map","post","id","title","body"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA;;;;;AAIA,SAASC,IAAT,QAAqB,kBAArB,C,CAEA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;IAyBMC,I;;;;;;;;;;;;;;;;;UAGJC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE;AADD,K;;;;;;wCAGW;AAAA;;AACjB;AACA;AAEA;AACA;AACA;AACA;AACA;AAEDL,MAAAA,KAAK,CAACM,GAAN,CAAU,GAAV,EACC;AACA;AACA;AACA;AACA;AALD,OAMIC,IANJ,CAMS,UAAAC,GAAG,EAAI;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,QAAA,MAAI,CAACG,QAAL,CAAc;AACZN,UAAAA,KAAK,EAAEG,GAAG,CAACI,IAAJ,CAASC,KAAT,CAAe,CAAf,EAAkB,EAAlB,CADK,CACmB;;AADnB,SAAd;AAGD,OAXJ;AAcA;;;6BACO;AAEN;AAFM,UAGER,KAHF,GAGY,KAAKD,KAHjB,CAGEC,KAHF;AAIN,UAAMS,QAAQ,GAAGT,KAAK,CAACU,MAAN,GACfV,KAAK,CAACW,GAAN,CAAW,UAAAC,IAAI,EAAI;AACjB,eACE;AAAK,UAAA,SAAS,EAAC,WAAf;AAA2B,UAAA,GAAG,EAAEA,IAAI,CAACC,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAK,UAAA,GAAG,EAAEjB,KAAV;AAAiB,UAAA,GAAG,EAAC,sBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIE,oBAAC,IAAD;AAAM,UAAA,EAAE,EAAE,MAAMgB,IAAI,CAACC,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAM,UAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA8BD,IAAI,CAACE,KAAnC,CADF,CAJF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIF,IAAI,CAACG,IAAT,CAPF,CAFF,CADF;AAcD,OAfD,CADe,GAiBZ;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAjBL;AAmBA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEIN,QAFJ,CADF,CADF;AAQD;;;;EA9DgBf,S;;AAiEnB,eAAeI,IAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport quots from '../quots.jpg';\r\n/*\r\n  We will be using this link tag to user the post.id to use it as route parameter\r\n  and then based on the post we want to load our Post Component\r\n*/\r\nimport { Link } from 'react-router-dom';\r\n\r\n// We are creating functional components because we are not storing any states over here.\r\n// className container and center are materialzied classes to give our app a look.\r\n\r\n/*\r\n  Now we want our Home content to fetch some data from the third party API.\r\n          Example: https://jsonplaceholder.typicode.com/posts\r\n  To do that we need to have axios --> axios is a HTTP client which helps to fetch data from API's.\r\n          --> We import the axios library from the npm : npm install axios\r\n          --> Now we have the axios installed so we can now go and fetch data from the API.\r\n          --> How do we do that:\r\n                # Since we have lifecycle hooks of a component, we discussed that a good point to load external data to the\r\n                  component is componentDidMount() --> when component is already mounted on the DOM.\r\n                # So we will use axios inside componentDidMount() to get the data from the API.\r\n                # To use lifecycle hooks we need to convert this component to a class based component:\r\n                          Why class based?\r\n                          Because we can't use lifecycle hooks inside functional component\r\n                        const Home = () => {\r\n                          return(\r\n                            {/*}<div>\r\n                              <div className='container center'>\r\n                                <h4>Home Page</h4>\r\n                                <p> This my home page. </p>\r\n                              </div>\r\n                            </div>\r\n                          )\r\n                        }\r\nexport default Home; */\r\n\r\nclass Home extends Component {\r\n\r\n  // we create a state and initial state has empty aray of posts.\r\n  state = {\r\n    posts: [ ]\r\n  }\r\n  componentDidMount(){\r\n    // We will first import axios and then make a get request because we want to get data.\r\n    // We can use post if want to post but for this application we just want to get data\r\n\r\n    // The get() request is asynchronous i.e it will take sometime to go and fetch the data from API.\r\n    // So it returns a promise.\r\n    // Promise means that this request will return at somepoint and time.\r\n    // So we use .then() method.\r\n    // Any code inside .then() method only triggers when the get request is completed.\r\n\r\n   axios.get('/')\r\n    // .then() on completion fires back a callback function and that function has the response object.\r\n    // we can check the response object by logging it in the console.\r\n    // we have a property called data inside the response object.\r\n    // we can grab that res.data to get all the data and output it.\r\n    // To output this data in this Home content we need to have a state which will contains the posts.\r\n      .then(res => {\r\n        console.log(res);\r\n        this.setState({\r\n          posts: res.data.slice(0, 20)   // this will set the posts state with the data we are fetching, by adding fetch we are limiting it 20 posts\r\n        })\r\n      })\r\n\r\n\r\n  }\r\n  render(){\r\n\r\n    // Here we are destrucuting the posts and we are cycling through the list we have and then outputting it on out home page\r\n    const { posts } = this.state;\r\n    const postList = posts.length ? (\r\n      posts.map( post => {\r\n        return (\r\n          <div className='post card' key={post.id}>\r\n            <img src={quots} alt='This is my car image' />\r\n            <div className='card-content'>\r\n              {/* We will surround the span tag with a {Link to=<dynamic_id to use as route param>}\r\n                  We cant just give to = '/post_id' because it will look literally for /post_id\r\n                */}\r\n              <Link to={'/' + post.id}  >\r\n                <span className='card-title'>{post.title}</span>\r\n              </Link>\r\n              <p>{post.body}</p>\r\n            </div>\r\n          </div>\r\n        )\r\n      })\r\n    ) : (<div className='center'>No posts yet</div>)\r\n\r\n    return(\r\n      <div>\r\n        <div className='container center home'>\r\n          <h4>Home Page</h4>\r\n          { postList }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}